import { Selection } from 'd3-selection';
import { Observable, Subject, Subscription } from 'rxjs';
import { Axes, ChartConfiguration, ChartTooltip, Margin } from './chart-configuration';
import { ChartItemEvent, ChartMouseEvent, ChartZoomEvent, DisplayType, IChartBase, Scale, TooltipEvent } from './chart.interface';
import { IFunctions } from './functions.interface';
import { IOptions } from './options.interface';
import { ISeries, SeriesConfiguration } from './series.interface';
export declare class ChartBase<T = any> implements IChartBase {
    isResize: boolean;
    mouseEventSubject: Subject<ChartMouseEvent>;
    zoomEventSubject: Subject<ChartZoomEvent>;
    chartItemEventSubject: Subject<ChartItemEvent>;
    isTooltipDisplay: boolean;
    protected svgWidth: number;
    protected svgHeight: number;
    protected scales: Scale[];
    protected width: number;
    protected height: number;
    protected originalData: any;
    protected svg: Selection<any, any, HTMLElement, any>;
    protected selector: Selection<any, any, HTMLElement, any>;
    protected mainGroup: Selection<any, any, HTMLElement, any>;
    protected zoomGroup: Selection<any, any, HTMLElement, any>;
    protected selectionGroup: Selection<any, any, HTMLElement, any>;
    protected optionGroup: Selection<any, any, HTMLElement, any>;
    protected seriesGroup: Selection<any, any, HTMLElement, any>;
    protected titleGroup: Selection<any, any, any, any>;
    protected legendGroup: Selection<any, any, any, any>;
    protected seriesList: ISeries[];
    protected functionList: IFunctions[];
    protected optionList: IOptions[];
    protected subscription: Subscription;
    protected chartClickSubject: Subject<any>;
    protected tooltipGroup: Selection<any, any, HTMLElement, any>;
    protected tooltipTemplete: any;
    protected margin: Margin;
    protected defaultTitleStyle: any;
    protected defaultLegendStyle: any;
    protected defaultAxisLabelStyle: any;
    protected defaultAxisTitleStyle: any;
    private config;
    private isTooltip;
    private isTooltipMultiple;
    private clipPath;
    private originDomains;
    private idleTimeout;
    private maskId;
    private colors;
    private isCustomMargin;
    private axisGroups;
    private gridLineGroups;
    private axisTitleMargin;
    private isTitle;
    private titleContainerSize;
    private titlePlacement;
    private isLegend;
    private legendPlacement;
    private legendAlign;
    private legendContainerSize;
    private legendPadding;
    private currentLegend;
    private isLegendCheckBox;
    private isLegendAll;
    private chartLegend;
    private isLegendAllHide;
    private currentScale;
    private tooltipItems;
    private maxTooltipCount;
    private tooltipEventSubject;
    private eachElementAsObservableSubscription;
    private webglCanvas;
    private webglContext;
    private prevCurrentItemHash;
    private crossFilterObject;
    private chartLifecycleSubject;
    private isRealTime;
    private realTimeSubscription;
    constructor(configuration: ChartConfiguration);
    get chartData(): T[];
    set chartData(value: T[]);
    get chartContainer(): Selection<any, any, HTMLElement, any>;
    get webglElementContext(): any;
    get webglCanvasElement(): Selection<any, any, HTMLElement, any>;
    get chartMargin(): any;
    set toolTipTemplete(value: any);
    set toolTipTarget(value: any);
    get tooltip(): ChartTooltip;
    get chartSeries(): ISeries[];
    get functions(): IFunctions[];
    get clipPathSelector(): any;
    get mouseEvent$(): Observable<ChartMouseEvent>;
    get zoomEvent$(): Observable<any>;
    get tooltipEvent$(): Observable<TooltipEvent>;
    get lifecycle$(): Observable<{
        type: string;
    }>;
    get seriesColors(): string[];
    get chartItemEvent(): Observable<ChartItemEvent>;
    selectedChart(): Observable<any>;
    getColorBySeriesIndex(index: number): string;
    getColorByIndex(index: number): string;
    initialize(configuration: ChartConfiguration): boolean;
    bootstrap(configuration: ChartConfiguration): void;
    realTime(isRealTime: boolean, duration?: number, term?: number): this;
    data(data: any[]): this;
    appendData(data: any, seriesSelector?: string): void;
    series(seriesConfigurations: SeriesConfiguration[]): this;
    title(chartTitle: string): this;
    axes(axes: Axes[]): this;
    draw(): this;
    clear(): void;
    showTooltipBySeriesSelector(selector: string): Selection<any, any, HTMLElement, any>;
    hideTooltipBySeriesSelector(selector: string): Selection<any, any, HTMLElement, any>;
    drawTooltipBySeriesSelector(selector: string): void;
    destroy(): void;
    updateOptions(): void;
    targetSeriesUpdate(series: ISeries, index: number): Promise<void>;
    execute(): Promise<void>;
    updateSeries(displayType?: DisplayType): void;
    getObjectWithArrayInPromise(list: ISeries[]): Promise<unknown>;
    updateRescaleAxis(isZoom?: boolean): void;
    pointerClear(): void;
    selectionClear(): void;
    enableFunction(selector: string): void;
    disableFunction(selector: string): void;
    showTooltip(boxStyle?: {
        fill: string;
        opacity?: number;
        stroke: string;
        strokeWidth?: number;
    }, textStyle?: {
        fill: number;
        size: number;
    }): Selection<any, any, HTMLElement, any>;
    hideTooltip(): Selection<any, any, HTMLElement, any>;
    protected updateFunctions(): void;
    protected setRootSize(): void;
    protected initLegend(): void;
    protected initContainer(): void;
    protected addEventListner(): void;
    drawTooltipPointer(seriesList: ISeries[], tooltipTargetList: any[]): void;
    drawTooltipContents(seriesList: ISeries[], tooltipTargetList: any[], tooltipTextParser: any): void;
    protected drawTooltip(currentSeries: ISeries, currentTooltipData: any[], tooltipTextParser: any): void;
    protected zoominEventHandler(chartEvent: ChartZoomEvent): void;
    protected zoomoutEventHandler(): void;
    protected mouseleaveEventHandler(): void;
    protected mousemoveDataClear(): void;
    protected mouseoutEventHandler(positionData: any[]): void;
    protected mouseoverEventHandler(positionData: any[]): void;
    protected updateTitle(): void;
    protected updateAxis(): Promise<void>;
    protected updateLegend(): void;
    protected updateDisplay(displayType?: DisplayType): void;
    protected setupData(data: T[]): T[];
    protected setupScale(axes?: Axes[], width?: number, height?: number, reScaleAxes?: any[]): Scale[];
    protected resizeEventHandler: () => void;
    private clearOption;
    private idled;
    private onLegendCheckBoxClick;
    private onLegendAllCheckBoxItemClick;
    private isLegendItemChecked;
    private onLegendCheckBoxItemClick;
    private onLegendLabelItemClick;
    private onLegendLabelItemSelect;
    private onLegendAllLabelItemSelect;
}
//# sourceMappingURL=chart-base.d.ts.map